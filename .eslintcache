[{"/home/osboxes/Desktop/ULTIMO/frontend/src/service/protocol-service.js":"1","/home/osboxes/Desktop/ULTIMO/frontend/src/containers/chief-of-project.js":"2"},{"size":1732,"mtime":1607628507170,"results":"3","hashOfConfig":"4"},{"size":6408,"mtime":1607628576061,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1odxteq",{"filePath":"8","messages":"9","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/home/osboxes/Desktop/ULTIMO/frontend/src/service/protocol-service.js",["11"],"/home/osboxes/Desktop/ULTIMO/frontend/src/containers/chief-of-project.js",["12","13","14","15"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Button, Table, Modal } from \"react-bootstrap\";\nimport ProjectService from \"../service/project-service\";\nimport \"./Chief.css\";\nimport Navbar from \"../components/navbar\";\n\nexport default function ChiefOfProject() {\n  const [name, setName] = useState(\"\");\n  const [endDate, setEndDate] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [setear, setSetear] = useState([]);\n  const [show, setShow] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  //TODO Verificar si se deshabilita el botón de iniciar una vez que lo iniciamos\n  const [disabledButton, setDisabledButton] = useState(false);\n\n  const history = useHistory();\n\n  const validateForm = () => {\n    return name.length > 0 && endDate;\n  };\n\n  const getProjects = async () => {\n    const { data, status } = await ProjectService.getAll(\n      localStorage.getItem(\"userId\")\n    );\n    if (status === 200 && data) {\n      setProjects(data.response);\n      setears();\n    }\n  };\n\n  const setears = () => {\n    projects.map(async (project) => {\n      let activities = await ProjectService.getCurrentActivity(project.id);\n      if (activities.data[0].name === \"Crear Proyecto\") {\n        setSetear((setear) => [...setear, parseInt(project.id)]);\n      }\n    });\n  };\n\n  const getCurrentActivity = async (id) => {\n    const { data, status } = await ProjectService.getCurrentActivity(id);\n    if (status === 200 && data) {\n      console.log(data[0].name);\n      return data[0].name;\n    }\n  };\n\n  useEffect(() => {\n    getProjects();\n  }, [disabledButton]);\n\n  const handleSubmit = async (event) => {\n    try {\n      event.preventDefault();\n      const response = await ProjectService.createProject(name, endDate);\n      if (response && response.status === 200 && response.data) {\n        setProjects((projects) => [...projects, response.data]);\n        handleShow();\n        setModalMessage(\"El proyecto ha sido creado correctamente.\");\n        //TODO checkear si funciona bien, falla en el back en bonita no ejecuta\n        //Una vez que está creado el proyecto podemos correr la primera tarea\n        await ProjectService.startActivity(response.data.id);\n      } else {\n        console.log(\"Error al crear el proyecto\");\n      }\n    } catch (e) {\n      console.log(\"Error al crear el proyecto\");\n    }\n  };\n\n  const handleShowProtocols = async () => {};\n\n  const startProject = async (projectId) => {\n    const { data } = await ProjectService.getProtocolsByProject(projectId);\n    if (data.protocol.length === 0) {\n      setModalMessage(\n        \"Para poder iniciar un proyecto debe agregarse al menos un protocolo.\"\n      );\n      handleShow();\n    } else {\n      /*TODO deshabilitar el botón de iniciar proyecto funciona una vez, \n      pero si vamos a los protocolos y volvemos se vuelve a habilitar, \n      y en ese caso se podría correr otra tarea desde ahí, habría que guardar \n      algo en la bd para consultar si ya no fue iniciado podría ser el startDate?*/\n      //setDisabledButton(true);//arreglar porque diseablea todo\n      \n      await ProjectService.assignActivity(projectId, localStorage.getItem(\"userId\")); \n      await ProjectService.startActivity(projectId);      \n      handleShow();\n      setModalMessage(\"El proyecto ha sido inicializado correctamente.\");\n\n    }\n  };\n\n  const formatDate = (date) => {\n    return date.split(\" \")[0].split(\"-\").reverse().join(\"-\");\n  };\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Navbar />\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Proyectos</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{modalMessage}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <div className=\"chief-body\">\n        <Form onSubmit={handleSubmit}>\n          <h3>Crear un nuevo Proyecto</h3>\n          <Form.Group controlId=\"name\">\n            <Form.Label>Nombre</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"text\"\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Nombre del proyecto\"\n            />\n          </Form.Group>\n          <Form.Group size=\"lg\" controlId=\"endDate\">\n            <Form.Label>Fecha de fin</Form.Label>\n            <Form.Control\n              type=\"date\"\n              onChange={(e) => setEndDate(e.target.value)}\n              required\n            />\n          </Form.Group>\n          <Button variant=\"dark\" type=\"submit\" disabled={!validateForm()}>\n            Guardar\n          </Button>\n        </Form>\n        <div className=\"mt-5\">\n          <h3>Proyectos creados</h3>\n          <Table striped bordered hover size=\"lg\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Estado</th>\n                <th>Fecha de creación</th>\n                <th colspan=\"2\">Acción</th>\n              </tr>\n            </thead>\n            <tbody>\n              {projects.length > 0 &&\n                projects.map((project) => (\n                  <tr>\n                    <td>{project.id}</td>\n                    <td>{project.state === \"started\" && \"Creado\"}</td>\n                    <td>{formatDate(project.start)}</td>\n                    <td>\n                      <Button\n                        variant=\"dark\"\n                        size=\"sm\"\n                        onClick={() => {\n                          handleShowProtocols();\n                          history.push(`/projects/${project.id}/protocols`);\n                        }}\n                      >\n                        Ver Protocolos\n                      </Button>\n                    </td>\n                    <td>\n                      <Button\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={() => startProject(project.id)}\n                        disabled={disabledButton}\n                      >\n                        Iniciar Proyecto\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </>\n  );\n}\n",{"ruleId":"16","severity":1,"message":"17","line":81,"column":1,"nodeType":"18","endLine":87,"endColumn":3},{"ruleId":"19","severity":1,"message":"20","line":12,"column":10,"nodeType":"21","messageId":"22","endLine":12,"endColumn":16},{"ruleId":"19","severity":1,"message":"23","line":16,"column":26,"nodeType":"21","messageId":"22","endLine":16,"endColumn":43},{"ruleId":"19","severity":1,"message":"24","line":43,"column":9,"nodeType":"21","messageId":"22","endLine":43,"endColumn":27},{"ruleId":"25","severity":1,"message":"26","line":53,"column":6,"nodeType":"27","endLine":53,"endColumn":22,"suggestions":"28"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'setear' is assigned a value but never used.","Identifier","unusedVar","'setDisabledButton' is assigned a value but never used.","'getCurrentActivity' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProjects'. Either include it or remove the dependency array.","ArrayExpression",["29"],{"desc":"30","fix":"31"},"Update the dependencies array to be: [disabledButton, getProjects]",{"range":"32","text":"33"},[1651,1667],"[disabledButton, getProjects]"]